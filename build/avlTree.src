	; TASKING VX-toolset for C166: C compiler v4.0r1 Build 741 SN 07744515
	; Options: -f cc8536a -c99 -Mh --fp-model=FT -Cxc2287 --core=xc16x -DTASKING_VIPER -D__USIC_MEM_TYPE=__PAGE_080_MEM_TYPE -D__MULTICAN_MEM_TYPE=__PAGE_080_MEM_TYPE -DTTC50 -DRTS_TTC_FLASH_DATE_YEAR=2018 -DRTS_TTC_FLASH_DATE_MONTH=2 -DRTS_TTC_FLASH_DATE_DAY=2 -DRTS_TTC_FLASH_DATE_HOUR=16 -DRTS_TTC_FLASH_DATE_MINUTE=21 -I..\..\..\Environment\inc -I..\..\..\Environment\inc_int -I..\..\..\Environment\bsp -I. --tradeoff=0 --no-tasking-sfr -ga --language=+cmp14,+div32,-gcc,-strings -O3 --source --mac -o build\avlTree.src
	; Module start
	.source	'avlTree.c'
code_AVL_insert	.section	code, cluster 'AVL_insert', new
	.global	_AVL_insert

; avlTree.c	     1  //http://www.zentut.com/c-tutorial/c-avl-tree/
; avlTree.c	     2  
; avlTree.c	     3  #include <string.h> //memcpy
; avlTree.c	     4  #include <stdlib.h> //malloc
; avlTree.c	     5  
; avlTree.c	     6  #include "IO_RTC.h"
; avlTree.c	     7  #include "IO_Driver.h"
; avlTree.c	     8  #include "mathFunctions.h"
; avlTree.c	     9  #include "avlTree.h"
; avlTree.c	    10  
; avlTree.c	    11  //-------------------------------------------------------------------
; avlTree.c	    12  //Private functions
; avlTree.c	    13  //-------------------------------------------------------------------
; avlTree.c	    14  
; avlTree.c	    15  ///////////////////////*
; avlTree.c	    16  //////////////////////get the height of a node
; avlTree.c	    17  //////////////////////*/
; avlTree.c	    18  //////////////////////static int AVL_getHeight(AVLNode* n)
; avlTree.c	    19  //////////////////////{
; avlTree.c	    20  //////////////////////    if (n == NULL)
; avlTree.c	    21  //////////////////////    {
; avlTree.c	    22  //////////////////////        return -1;
; avlTree.c	    23  //////////////////////    }
; avlTree.c	    24  //////////////////////    else
; avlTree.c	    25  //////////////////////    {
; avlTree.c	    26  //////////////////////        return n->height;
; avlTree.c	    27  //////////////////////    }
; avlTree.c	    28  //////////////////////}
; avlTree.c	    29  //////////////////////
; avlTree.c	    30  ///////////////////////*
; avlTree.c	    31  //////////////////////get maximum value of two integers
; avlTree.c	    32  //////////////////////static int max(int l, int r)
; avlTree.c	    33  ////////////////////////Moved to mathFunctions.c
; avlTree.c	    34  //////////////////////{
; avlTree.c	    35  //////////////////////return l > r ? l : r;
; avlTree.c	    36  //////////////////////}
; avlTree.c	    37  //////////////////////*/
; avlTree.c	    38  //////////////////////
; avlTree.c	    39  ///////////////////////*
; avlTree.c	    40  //////////////////////perform a rotation between a k2 node and its left child
; avlTree.c	    41  //////////////////////
; avlTree.c	    42  //////////////////////note: call AVL_singleRotateWithLeft only if k2 node has a left child
; avlTree.c	    43  //////////////////////*/
; avlTree.c	    44  //////////////////////
; avlTree.c	    45  //////////////////////static AVLNode* AVL_singleRotateWithLeft(AVLNode* k2)
; avlTree.c	    46  //////////////////////{
; avlTree.c	    47  //////////////////////    AVLNode* k1 = NULL;
; avlTree.c	    48  //////////////////////
; avlTree.c	    49  //////////////////////    k1 = k2->left;
; avlTree.c	    50  //////////////////////    k2->left = k1->right;
; avlTree.c	    51  //////////////////////    k1->right = k2;
; avlTree.c	    52  //////////////////////
; avlTree.c	    53  //////////////////////    k2->height = max(AVL_getHeight(k2->left), AVL_getHeight(k2->right)) + 1;
; avlTree.c	    54  //////////////////////    k1->height = max(AVL_getHeight(k1->left), k2->height) + 1;
; avlTree.c	    55  //////////////////////    return k1; /* new root */
; avlTree.c	    56  //////////////////////}
; avlTree.c	    57  //////////////////////
; avlTree.c	    58  ///////////////////////*
; avlTree.c	    59  //////////////////////perform a rotation between a node (k1) and its right child
; avlTree.c	    60  //////////////////////
; avlTree.c	    61  //////////////////////note: call AVL_singleRotateWithRight only if
; avlTree.c	    62  //////////////////////the k1 node has a right child
; avlTree.c	    63  //////////////////////*/
; avlTree.c	    64  //////////////////////
; avlTree.c	    65  //////////////////////static AVLNode* AVL_singleRotateWithRight(AVLNode* k1)
; avlTree.c	    66  //////////////////////{
; avlTree.c	    67  //////////////////////    AVLNode* k2;
; avlTree.c	    68  //////////////////////
; avlTree.c	    69  //////////////////////    k2 = k1->right;
; avlTree.c	    70  //////////////////////    k1->right = k2->left;
; avlTree.c	    71  //////////////////////    k2->left = k1;
; avlTree.c	    72  //////////////////////
; avlTree.c	    73  //////////////////////    k1->height = max(AVL_getHeight(k1->left), AVL_getHeight(k1->right)) + 1;
; avlTree.c	    74  //////////////////////    k2->height = max(AVL_getHeight(k2->right), k1->height) + 1;
; avlTree.c	    75  //////////////////////
; avlTree.c	    76  //////////////////////    return k2;  /* New root */
; avlTree.c	    77  //////////////////////}
; avlTree.c	    78  //////////////////////
; avlTree.c	    79  ///////////////////////*
; avlTree.c	    80  //////////////////////
; avlTree.c	    81  //////////////////////perform the left-right double rotation,
; avlTree.c	    82  //////////////////////
; avlTree.c	    83  //////////////////////note: call AVL_doubleRotateWithLeft only if k3 node has
; avlTree.c	    84  //////////////////////a left child and k3's left child has a right child
; avlTree.c	    85  //////////////////////*/
; avlTree.c	    86  //////////////////////
; avlTree.c	    87  //////////////////////static AVLNode* AVL_doubleRotateWithLeft(AVLNode* k3)
; avlTree.c	    88  //////////////////////{
; avlTree.c	    89  //////////////////////    /* Rotate between k1 and k2 */
; avlTree.c	    90  //////////////////////    k3->left = AVL_singleRotateWithRight(k3->left);
; avlTree.c	    91  //////////////////////
; avlTree.c	    92  //////////////////////    /* Rotate between K3 and k2 */
; avlTree.c	    93  //////////////////////    return AVL_singleRotateWithLeft(k3);
; avlTree.c	    94  //////////////////////}
; avlTree.c	    95  //////////////////////
; avlTree.c	    96  ///////////////////////*
; avlTree.c	    97  //////////////////////perform the right-left double rotation
; avlTree.c	    98  //////////////////////
; avlTree.c	    99  //////////////////////notes: call AVL_doubleRotateWithRight only if k1 has a
; avlTree.c	   100  //////////////////////right child and k1's right child has a left child
; avlTree.c	   101  //////////////////////*/
; avlTree.c	   102  //////////////////////
; avlTree.c	   103  //////////////////////
; avlTree.c	   104  //////////////////////
; avlTree.c	   105  //////////////////////static AVLNode* AVL_doubleRotateWithRight(AVLNode* k1)
; avlTree.c	   106  //////////////////////{
; avlTree.c	   107  //////////////////////    /* rotate between K3 and k2 */
; avlTree.c	   108  //////////////////////    k1->right = AVL_singleRotateWithLeft(k1->right);
; avlTree.c	   109  //////////////////////
; avlTree.c	   110  //////////////////////    /* rotate between k1 and k2 */
; avlTree.c	   111  //////////////////////    return AVL_singleRotateWithRight(k1);
; avlTree.c	   112  //////////////////////}
; avlTree.c	   113  
; avlTree.c	   114  
; avlTree.c	   115  /*
; avlTree.c	   116  Recursively display AVL tree or subtree
; avlTree.c	   117  void display_avl(AVLNode* t)
; avlTree.c	   118  {
; avlTree.c	   119  if (t == NULL)
; avlTree.c	   120  return;
; avlTree.c	   121  printf("%d", t->id);
; avlTree.c	   122  
; avlTree.c	   123  if (t->left != NULL)
; avlTree.c	   124  printf("(L:%d)", t->left->id);
; avlTree.c	   125  if (t->right != NULL)
; avlTree.c	   126  printf("(R:%d)", t->right->id);
; avlTree.c	   127  printf("\n");
; avlTree.c	   128  
; avlTree.c	   129  display_avl(t->left);
; avlTree.c	   130  display_avl(t->right);
; avlTree.c	   131  }
; avlTree.c	   132  */
; avlTree.c	   133  
; avlTree.c	   134  /*
; avlTree.c	   135  remove all nodes of an AVL tree
; avlTree.c	   136  void dispose(AVLNode* t)
; avlTree.c	   137  {
; avlTree.c	   138  if (t != NULL)
; avlTree.c	   139  {
; avlTree.c	   140  dispose(t->left);
; avlTree.c	   141  dispose(t->right);
; avlTree.c	   142  free(t);
; avlTree.c	   143  }
; avlTree.c	   144  }
; avlTree.c	   145  */
; avlTree.c	   146  
; avlTree.c	   147  /*
; avlTree.c	   148  remove a node in the tree
; avlTree.c	   149  AVLNode* delete(int e, AVLNode* t)
; avlTree.c	   150  {
; avlTree.c	   151  printf("Sorry; Delete is unimplemented; %d remains\n", e);
; avlTree.c	   152  return t;
; avlTree.c	   153  }
; avlTree.c	   154  */
; avlTree.c	   155  /*
; avlTree.c	   156  struct AVLNode* deleteNode(struct AVLNode* root, int key)
; avlTree.c	   157  {
; avlTree.c	   158  // STEP 1: PERFORM STANDARD BST DELETE
; avlTree.c	   159  
; avlTree.c	   160  if (root == NULL)
; avlTree.c	   161  return root;
; avlTree.c	   162  
; avlTree.c	   163  // If the key to be deleted is smaller than the root's key,
; avlTree.c	   164  // then it lies in left subtree
; avlTree.c	   165  if (key < root->key)
; avlTree.c	   166  root->left = deleteNode(root->left, key);
; avlTree.c	   167  
; avlTree.c	   168  // If the key to be deleted is greater than the root's key,
; avlTree.c	   169  // then it lies in right subtree
; avlTree.c	   170  else if (key > root->key)
; avlTree.c	   171  root->right = deleteNode(root->right, key);
; avlTree.c	   172  
; avlTree.c	   173  // if key is same as root's key, then This is the node
; avlTree.c	   174  // to be deleted
; avlTree.c	   175  else
; avlTree.c	   176  {
; avlTree.c	   177  // node with only one child or no child
; avlTree.c	   178  if ((root->left == NULL) || (root->right == NULL))
; avlTree.c	   179  {
; avlTree.c	   180  struct AVLNode *temp = root->left ? root->left : root->right;
; avlTree.c	   181  
; avlTree.c	   182  // No child case
; avlTree.c	   183  if (temp == NULL)
; avlTree.c	   184  {
; avlTree.c	   185  temp = root;
; avlTree.c	   186  root = NULL;
; avlTree.c	   187  }
; avlTree.c	   188  else // One child case
; avlTree.c	   189  *root = *temp; // Copy the contents of the non-empty child
; avlTree.c	   190  
; avlTree.c	   191  free(temp);
; avlTree.c	   192  }
; avlTree.c	   193  else
; avlTree.c	   194  {
; avlTree.c	   195  // node with two children: Get the inorder successor (smallest
; avlTree.c	   196  // in the right subtree)
; avlTree.c	   197  struct AVLNode* temp = minValueNode(root->right);
; avlTree.c	   198  
; avlTree.c	   199  // Copy the inorder successor's data to this node
; avlTree.c	   200  root->key = temp->key;
; avlTree.c	   201  
; avlTree.c	   202  // Delete the inorder successor
; avlTree.c	   203  root->right = deleteNode(root->right, temp->key);
; avlTree.c	   204  }
; avlTree.c	   205  }
; avlTree.c	   206  
; avlTree.c	   207  // If the tree had only one node then return
; avlTree.c	   208  if (root == NULL)
; avlTree.c	   209  return root;
; avlTree.c	   210  
; avlTree.c	   211  // STEP 2: UPDATE HEIGHT OF THE CURRENT NODE
; avlTree.c	   212  root->height = max(AVL_getHeight(root->left), AVL_getHeight(root->right)) + 1;
; avlTree.c	   213  
; avlTree.c	   214  // STEP 3: GET THE BALANCE FACTOR OF THIS NODE (to check whether
; avlTree.c	   215  //  this node became unbalanced)
; avlTree.c	   216  int balance = getBalance(root);
; avlTree.c	   217  
; avlTree.c	   218  // If this node becomes unbalanced, then there are 4 cases
; avlTree.c	   219  
; avlTree.c	   220  // Left Left Case
; avlTree.c	   221  if (balance > 1 && getBalance(root->left) >= 0)
; avlTree.c	   222  return rightRotate(root);
; avlTree.c	   223  
; avlTree.c	   224  // Left Right Case
; avlTree.c	   225  if (balance > 1 && getBalance(root->left) < 0)
; avlTree.c	   226  {
; avlTree.c	   227  root->left = leftRotate(root->left);
; avlTree.c	   228  return rightRotate(root);
; avlTree.c	   229  }
; avlTree.c	   230  
; avlTree.c	   231  // Right Right Case
; avlTree.c	   232  if (balance < -1 && getBalance(root->right) <= 0)
; avlTree.c	   233  return leftRotate(root);
; avlTree.c	   234  
; avlTree.c	   235  // Right Left Case
; avlTree.c	   236  if (balance < -1 && getBalance(root->right) > 0)
; avlTree.c	   237  {
; avlTree.c	   238  root->right = rightRotate(root->right);
; avlTree.c	   239  return leftRotate(root);
; avlTree.c	   240  }
; avlTree.c	   241  
; avlTree.c	   242  return root;
; avlTree.c	   243  }
; avlTree.c	   244  */
; avlTree.c	   245  
; avlTree.c	   246  //-------------------------------------------------------------------
; avlTree.c	   247  //Public functions
; avlTree.c	   248  //-------------------------------------------------------------------
; avlTree.c	   249  
; avlTree.c	   250  /*
; avlTree.c	   251  insert a new node into the tree
; avlTree.c	   252  */
; avlTree.c	   253  //AVLNode* AVL_insert(AVLNode* t, ubyte4 messageID, ubyte1 messageData[8], ubyte4 minTime, ubyte4 maxTime, bool req)
; avlTree.c	   254  AVLNode* AVL_insert(AVLNode** messageHistoryArray, ubyte4 messageID, ubyte1 messageData[8], ubyte4 minTime, ubyte4 maxTime, bool req)
; Function _AVL_insert
_5:
_AVL_insert	.proc	far
	movw	[-r15],r0
_37:
	movw	[-r15],r1
_48:
	movw	[-r15],r6
_59:
	movw	[-r15],r7
_70:
	movw	[-r15],r8
_81:
	movw	[-r15],r9
_92:
	movw	[-r15],r10
_103:
	subw	r15,#0xa
_114:
	movw	r1,r12
	movw	r0,r13
	movw	[r15+#0x6],r2
	movw	[r15+#0x8],r3
	movw	[r15+#0x2],r4
	movw	r7,r14
_376:
	movw	[r15+#0x4],r5
	movw	[r15],r11
	movw	r6,[r15+#0x18]
	movw	r10,[r15+#0x1a]
_373:

; avlTree.c	   255  {
; avlTree.c	   256      //This function has been hijacked for an emergency quick fix
; avlTree.c	   257  
; avlTree.c	   258      AVLNode* message = (AVLNode*)malloc(sizeof(AVLNode));
	movw	r2,#0x16
_375:
	call	_malloc
_374:
	movw	r9,r2
	movw	r8,r3
_377:

; avlTree.c	   259      if (message == NULL) //malloc failed
	orw	r3,r9
	jmp+	cc_eq,_2
_391:

; avlTree.c	   260      {
; avlTree.c	   261          //fprintf(stderr, "Out of memory!!! (insert)\n");
; avlTree.c	   262          //exit(1);
; avlTree.c	   263      }
; avlTree.c	   264      else
; avlTree.c	   265      {
; avlTree.c	   266          //message->id = messageID;
; avlTree.c	   267          message->timeBetweenMessages_Min = minTime;
	movw	r11,r9
	movw	r12,r8
	addw	r11,#0x8
	addcw	r12,#0x0
_392:

; avlTree.c	   268          message->timeBetweenMessages_Max = maxTime;
; avlTree.c	   269          IO_RTC_StartTime(&message->lastMessage_timeStamp);
	movw	r2,r9
_393:
	exts	r12,#0x1
	movw	[r11],r0
	addw	r11,#0x2
	addcw	r12,#0x0
_394:
	movw	r3,r8
_395:
	exts	r12,#0x1
	movw	[r11],r7
_396:
	movw	r11,r9
	movw	r12,r8
	addw	r11,#0x12
	addcw	r12,#0x0
_397:
	addw	r2,#0xc
	addcw	r3,#0x0
_398:
	exts	r12,#0x1
	movw	[r11],r6
	addw	r11,#0x2
	addcw	r12,#0x0
	exts	r12,#0x1
	movw	[r11],r10
_399:
	call	_IO_RTC_StartTime
_400:

; avlTree.c	   270  
; avlTree.c	   271          //To copy an entire array, http://stackoverflow.com/questions/9262784/array-equal-another-array
; avlTree.c	   272          memcpy(messageData, message->data, sizeof(messageData));
	movw	r2,[r15]
_378:
	movw	r3,r1
	movw	r4,r9
	movw	r5,r8
	movw	r11,#0x4
	call	_memcpy
_379:

; avlTree.c	   273  
; avlTree.c	   274          message->required = req;
	movw	r11,r9
	movw	r12,r8
	addw	r11,#0x10
	addcw	r12,#0x0
_401:
	movb	rh4,[r15+#0x1c]
_380:
	exts	r12,#0x1
	movb	[r11],rh4
_402:

; avlTree.c	   275  
; avlTree.c	   276          messageHistoryArray[messageID] = message;
	movw	r11,[r15+#0x2]
	movw	r12,[r15+#0x4]
_381:
	addw	r11,r11
	addcw	r12,r12
	addw	r11,r11
	addcw	r12,r12
	movw	r13,[r15+#0x6]
	movw	r14,[r15+#0x8]
_382:
	addw	r13,r11
	addcw	r14,r12
_403:
	exts	r14,#0x1
	movw	[r13],r9
	addw	r13,#0x2
	addcw	r14,#0x0
	exts	r14,#0x1
	movw	[r13],r8
_2:

; avlTree.c	   277      }
; avlTree.c	   278      return message;
	movw	r2,r9
	movw	r3,r8
_404:

; avlTree.c	   279  
; avlTree.c	   280      ////ACTUAL AVL INSERT CODE BELOW
; avlTree.c	   281      //if (t == NULL) //If the tree is empty
; avlTree.c	   282      //{
; avlTree.c	   283      //    /* Create and return a one-node tree */
; avlTree.c	   284      //    t = (AVLNode*)malloc(sizeof(AVLNode));
; avlTree.c	   285      //    if (t == NULL)
; avlTree.c	   286      //    {
; avlTree.c	   287      //        //fprintf(stderr, "Out of memory!!! (insert)\n");
; avlTree.c	   288      //        //exit(1);
; avlTree.c	   289      //    }
; avlTree.c	   290      //    else
; avlTree.c	   291      //    {
; avlTree.c	   292      //        t->id = messageID;
; avlTree.c	   293      //        t->timeBetweenMessages_Min = minTime;
; avlTree.c	   294      //        t->timeBetweenMessages_Max = maxTime;
; avlTree.c	   295      //        //To copy an entire array, http://stackoverflow.com/questions/9262784/array-equal-another-array
; avlTree.c	   296      //        memcpy(messageData, t->data, sizeof(messageData));
; avlTree.c	   297      //        IO_RTC_StartTime(&t->lastMessage_timeStamp);
; avlTree.c	   298  
; avlTree.c	   299      //        t->height = 0;
; avlTree.c	   300      //        t->left = t->right = NULL;
; avlTree.c	   301      //    }
; avlTree.c	   302      //}
; avlTree.c	   303      //else if (messageID < t->id)
; avlTree.c	   304      //{
; avlTree.c	   305      //    t->left = AVL_insert(t->left, messageID, messageData, minTime, maxTime, req);
; avlTree.c	   306      //    if (AVL_getHeight(t->left) - AVL_getHeight(t->right) == 2)
; avlTree.c	   307      //    {
; avlTree.c	   308      //        if (messageID < t->left->id)
; avlTree.c	   309      //        {
; avlTree.c	   310      //            t = AVL_singleRotateWithLeft(t);
; avlTree.c	   311      //        }
; avlTree.c	   312      //        else
; avlTree.c	   313      //        {
; avlTree.c	   314      //            t = AVL_doubleRotateWithLeft(t);
; avlTree.c	   315      //        }
; avlTree.c	   316      //    }
; avlTree.c	   317      //}
; avlTree.c	   318      //else if (messageID > t->id)
; avlTree.c	   319      //{
; avlTree.c	   320      //    t->right = AVL_insert(t->right, messageID, messageData, minTime, maxTime, req);
; avlTree.c	   321      //    if (AVL_getHeight(t->right) - AVL_getHeight(t->left) == 2)
; avlTree.c	   322      //    {
; avlTree.c	   323      //        if (messageID > t->right->id)
; avlTree.c	   324      //        {
; avlTree.c	   325      //            t = AVL_singleRotateWithRight(t);
; avlTree.c	   326      //        }
; avlTree.c	   327      //        else
; avlTree.c	   328      //        {
; avlTree.c	   329      //            t = AVL_doubleRotateWithRight(t);
; avlTree.c	   330      //        }
; avlTree.c	   331      //    }
; avlTree.c	   332      //}
; avlTree.c	   333      ///* Else X is in the tree already; we'll do nothing */
; avlTree.c	   334  
; avlTree.c	   335      //t->height = max(AVL_getHeight(t->left), AVL_getHeight(t->right)) + 1;
; avlTree.c	   336      //return t;
; avlTree.c	   337      //return message;
; avlTree.c	   338  }
	addw	r15,#0xa
_125:
	movw	r10,[r15+]
_136:
	movw	r9,[r15+]
_147:
	movw	r8,[r15+]
_158:
	movw	r7,[r15+]
_169:
	movw	r6,[r15+]
_180:
	movw	r1,[r15+]
_191:
	movw	r0,[r15+]
_202:
	ret
_24:
	; End of function
	; End of section

	.calls	'_AVL_insert','_malloc'
	.calls	'_AVL_insert','_IO_RTC_StartTime'
	.calls	'_AVL_insert','_memcpy'
	.calls	'_AVL_insert','',4,24
	.extern	_memcpy : far
	.extern	_malloc : far
	.extern	_IO_RTC_StartTime : far
	.debug		.debug_info
_17:
	.dl	742
	.dw	3
	.dl	_18
	.db	4
_16:
	.db	1
	.db	'avlTree.c',0
	.db	'TASKING VX-toolset for C166: C compiler',0
	.db	'C:\\Users\\helix\\Desktop\\SRE\\SRE SDK 2017-18\\VCU\\Environment\\dev\\SRE-3\\',0,12,1
	.dl	_19
	.db	2
	.db	'void',0,3,5
	.dl	138
	.db	4
	.dl	144
	.db	5
	.dl	138
	.db	3,5
	.dl	155
	.db	4
	.dl	160
	.db	6
	.db	'unsigned int',0,2,7,7
	.db	'memcpy',0,1,53,17,6
	.dl	144
	.db	1,1,1,1,8,1,53,33,2
	.dl	150
	.db	8,1,53,56,2
	.dl	166
	.db	8,1,53,68,2
	.dl	171
	.db	0,7
	.db	'malloc',0,2,78,33,6
	.dl	144
	.db	1,1,1,1,8,2,78,44,2
	.dl	171
	.db	0
_28:
	.db	6
	.db	'unsigned long int',0,4,7,3,5
	.dl	265
	.db	5
	.dl	286
	.db	7
	.db	'IO_RTC_StartTime',0,3,118,15,6
	.dl	171
	.db	1,1,1,1,9
	.db	'timestamp',0,3,118,49,2
	.dl	292
	.db	0
_34:
	.db	6
	.db	'unsigned char',0,1,8,10,8
	.dl	347
	.db	11,7,0,12
	.db	'AVLNode',0,4,9,16,22,13
	.db	'data',0
	.dl	364
	.db	8,2,35,0,13
	.db	'timeBetweenMessages_Min',0
	.dl	265
	.db	4,2,35,8,13
	.db	'lastMessage_timeStamp',0
	.dl	265
	.db	4,2,35,12,13
	.db	'required',0
	.dl	347
	.db	1,2,35,16,13
	.db	'timeBetweenMessages_Max',0
	.dl	265
	.db	4,2,35,18,0
_25:
	.db	3,5
	.dl	373
_26:
	.db	3,5
	.dl	516
_30:
	.db	3,5
	.dl	347
	.db	6
	.db	'unsigned short int',0,2,7,14
	.db	'__wchar_t',0,5,1,1
	.dl	534
	.db	14
	.db	'__size_t',0,5,1,1
	.dl	171
	.db	3,5
	.dl	138
	.db	14
	.db	'__prof_adm',0,5,1,1
	.dl	591
	.db	14
	.db	'__codeptr',0,5,1,1
	.dl	265
	.db	14
	.db	'size_t',0,1,29,25
	.dl	171
	.db	14
	.db	'ubyte1',0,6,21,29
	.dl	347
	.db	14
	.db	'ubyte2',0,6,22,29
	.dl	171
	.db	14
	.db	'ubyte4',0,6,23,29
	.dl	265
	.db	14
	.db	'bool',0,6,31,29
	.dl	347
	.db	14
	.db	'IO_ErrorType',0,7,150,1,17
	.dl	171
	.db	14
	.db	'AVLNode',0,4,26,3
	.dl	373
	.db	0
	; End of section

	.debug		.debug_abbrev
_18:
	.db	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,59,0,3,8,0,0,3,15,0,51,15,73,19,0,0,4,55,0,73,19,0,0,5
	.db	38,0,73,19,0,0,6,36,0,3,8,11,15,62,15,0,0,7,46,1,3,8,58,15,59,15,57,15,51,15,73,19,54,15,39,12,63,12,60
	.db	12,0,0,8,5,0,58,15,59,15,57,15,51,15,73,19,0,0,9,5,0,3,8,58,15,59,15,57,15,51,15,73,19,0,0,10,1,1,11,15
	.db	73,19,0,0,11,33,0,47,15,0,0,12,19,1,3,8,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14
	.db	22,0,3,8,58,15,59,15,57,15,73,19,0,0,0
	; End of section

	.debug		.debug_line
_19:
	.dl	_384-_383
_383:
	.dw	3
	.dl	_386-_385
_385:
	.db	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.db	'c:\\Program Files (x86)\\TASKING\\C166-VX v4.0r1\\include\\',0
	.db	'..\\..\\..\\Environment\\inc',0,0
	.db	'string.h',0,1,0,0
	.db	'stdlib.h',0,1,0,0
	.db	'IO_RTC.h',0,2,0,0
	.db	'avlTree.h',0,0,0,0
	.db	'avlTree.c',0,0,0,0
	.db	'ptypes_xe167.h',0,2,0,0
	.db	'IO_Constants.h',0,2,0,0,0
_386:
_384:
	; End of section

	.debug		.debug_pubnames
	.dl	57
	.dw	2
	.dl	_17,746,187
	.db	'memcpy',0
	.dl	235
	.db	'malloc',0
	.dl	297
	.db	'IO_RTC_StartTime',0
	.dl	0
	; End of section

	.debug		.debug_info, cluster 'AVL_insert'
_20:
	.dl	373
	.dw	3
	.dl	_21
	.db	4,1
	.db	'avlTree.c',0
	.db	'TASKING VX-toolset for C166: C compiler',0
	.db	'C:\\Users\\helix\\Desktop\\SRE\\SRE SDK 2017-18\\VCU\\Environment\\dev\\SRE-3\\',0,12,1
	.dl	_23,_22
	.db	2
	.dl	_16
	.db	3
	.db	'AVL_insert',0,1,254,1,10,6
	.dl	_25
	.db	1,1,1
	.dl	_5,_24,_4
	.db	12,19,146,176,2,0,64,36,146,161,2,0,33,4
	.db	'messageHistoryArray',0,1,254,1,31,2
	.dl	_26,_27
	.db	4
	.db	'messageID',0,1,254,1,59,2
	.dl	_28,_29
	.db	4
	.db	'messageData',0,1,254,1,77,2
	.dl	_30,_31
	.db	4
	.db	'minTime',0,1,254,1,100,2
	.dl	_28,_32
	.db	4
	.db	'maxTime',0,1,254,1,116,2
	.dl	_28,_33
	.db	4
	.db	'req',0,1,254,1,130,1,2
	.dl	_34,_35
	.db	5
	.dl	_5,_24
	.db	6
	.db	'message',0,1,130,2,14,2
	.dl	_25,_36
	.db	0,0,0
	; End of section

	.debug		.debug_abbrev, cluster 'AVL_insert'
_21:
	.db	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,51,15
	.db	73,16,54,15,39,12,63,12,17,1,18,1,64,6,42,9,0,0,4,5,0,3,8,58,15,59,15,57,15,51,15,73,16,2,6,0,0,5,11,1
	.db	17,1,18,1,0,0,6,52,0,3,8,58,15,59,15,57,15,51,15,73,16,2,6,0,0,0
	; End of section

	.debug		.debug_line, cluster 'AVL_insert'
_22:
	.dl	_388-_387
_387:
	.dw	3
	.dl	_390-_389
_389:
	.db	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.db	'avlTree.c',0,0,0,0,0
_390:
	.db	5,10,7,0,5,2
	.dl	_5
	.db	3,253,1,1,5,41,9
	.dw	_373-_5
	.db	3,4,1,5,22,9
	.dw	_374-_373
	.db	1,5,5,9
	.dw	_377-_374
	.db	3,1,1,5,16,9
	.dw	_391-_377
	.db	3,8,1,5,34,9
	.dw	_392-_391
	.db	3,2,1,5,42,9
	.dw	_393-_392
	.db	3,126,1,5,34,9
	.dw	_394-_393
	.db	3,2,1,5,42,9
	.dw	_395-_394
	.db	3,126,1,5,16,9
	.dw	_396-_395
	.db	3,1,1,5,34,9
	.dw	_397-_396
	.db	3,1,1,5,42,9
	.dw	_398-_397
	.db	3,127,1,5,34,9
	.dw	_399-_398
	.db	3,1,1,5,44,9
	.dw	_400-_399
	.db	3,3,1,5,16,9
	.dw	_379-_400
	.db	3,2,1,5,27,9
	.dw	_401-_379
	.db	1,5,28,9
	.dw	_402-_401
	.db	3,2,1,5,29,9
	.dw	_381-_402
	.db	1,5,28,9
	.dw	_382-_381
	.db	1,5,40,9
	.dw	_403-_382
	.db	1,5,5,9
	.dw	_2-_403
	.db	3,2,1,5,1,9
	.dw	_404-_2
	.db	3,60,1,9
	.dw	_24-_404
	.db	0,1,1
_388:
	; End of section

	.debug		.debug_ranges, cluster 'AVL_insert'
_23:
	.dl	-1,_5,0,_24-_5,0,0
	; End of section

	.debug		.debug_pubnames
	.dl	29
	.dw	2
	.dl	_20,377,147
	.db	'AVL_insert',0
	.dl	0
	; End of section

	.debug		.debug_loc, cluster 'AVL_insert'
_4:
	.dl	-1,_5,0,_37-_5
	.dw	58
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_6-_10
_10:
	.db	146,177,2,0,47
	.dw	_9-_11
_11:
_6:
	.db	18,49,46,40
	.dw	_7-_12
_12:
	.db	146,178,2,0,47
	.dw	_9-_13
_13:
_7:
	.db	18,50,46,40
	.dw	_8-_14
_14:
	.db	146,179,2,0,47
	.dw	_9-_15
_15:
_8:
	.db	146,180,2,0
_9:
	.db	22,19,62,36,33
	.dl	_37-_5,_48-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_38-_42
_42:
	.db	146,177,2,0,47
	.dw	_41-_43
_43:
_38:
	.db	18,49,46,40
	.dw	_39-_44
_44:
	.db	146,178,2,0,47
	.dw	_41-_45
_45:
_39:
	.db	18,50,46,40
	.dw	_40-_46
_46:
	.db	146,179,2,0,47
	.dw	_41-_47
_47:
_40:
	.db	146,180,2,0
_41:
	.db	22,19,62,36,33,50,34
	.dl	_48-_5,_59-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_49-_53
_53:
	.db	146,177,2,0,47
	.dw	_52-_54
_54:
_49:
	.db	18,49,46,40
	.dw	_50-_55
_55:
	.db	146,178,2,0,47
	.dw	_52-_56
_56:
_50:
	.db	18,50,46,40
	.dw	_51-_57
_57:
	.db	146,179,2,0,47
	.dw	_52-_58
_58:
_51:
	.db	146,180,2,0
_52:
	.db	22,19,62,36,33,52,34
	.dl	_59-_5,_70-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_60-_64
_64:
	.db	146,177,2,0,47
	.dw	_63-_65
_65:
_60:
	.db	18,49,46,40
	.dw	_61-_66
_66:
	.db	146,178,2,0,47
	.dw	_63-_67
_67:
_61:
	.db	18,50,46,40
	.dw	_62-_68
_68:
	.db	146,179,2,0,47
	.dw	_63-_69
_69:
_62:
	.db	146,180,2,0
_63:
	.db	22,19,62,36,33,54,34
	.dl	_70-_5,_81-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_71-_75
_75:
	.db	146,177,2,0,47
	.dw	_74-_76
_76:
_71:
	.db	18,49,46,40
	.dw	_72-_77
_77:
	.db	146,178,2,0,47
	.dw	_74-_78
_78:
_72:
	.db	18,50,46,40
	.dw	_73-_79
_79:
	.db	146,179,2,0,47
	.dw	_74-_80
_80:
_73:
	.db	146,180,2,0
_74:
	.db	22,19,62,36,33,56,34
	.dl	_81-_5,_92-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_82-_86
_86:
	.db	146,177,2,0,47
	.dw	_85-_87
_87:
_82:
	.db	18,49,46,40
	.dw	_83-_88
_88:
	.db	146,178,2,0,47
	.dw	_85-_89
_89:
_83:
	.db	18,50,46,40
	.dw	_84-_90
_90:
	.db	146,179,2,0,47
	.dw	_85-_91
_91:
_84:
	.db	146,180,2,0
_85:
	.db	22,19,62,36,33,58,34
	.dl	_92-_5,_103-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_93-_97
_97:
	.db	146,177,2,0,47
	.dw	_96-_98
_98:
_93:
	.db	18,49,46,40
	.dw	_94-_99
_99:
	.db	146,178,2,0,47
	.dw	_96-_100
_100:
_94:
	.db	18,50,46,40
	.dw	_95-_101
_101:
	.db	146,179,2,0,47
	.dw	_96-_102
_102:
_95:
	.db	146,180,2,0
_96:
	.db	22,19,62,36,33,60,34
	.dl	_103-_5,_114-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_104-_108
_108:
	.db	146,177,2,0,47
	.dw	_107-_109
_109:
_104:
	.db	18,49,46,40
	.dw	_105-_110
_110:
	.db	146,178,2,0,47
	.dw	_107-_111
_111:
_105:
	.db	18,50,46,40
	.dw	_106-_112
_112:
	.db	146,179,2,0,47
	.dw	_107-_113
_113:
_106:
	.db	146,180,2,0
_107:
	.db	22,19,62,36,33,62,34
	.dl	_114-_5,_125-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_115-_119
_119:
	.db	146,177,2,0,47
	.dw	_118-_120
_120:
_115:
	.db	18,49,46,40
	.dw	_116-_121
_121:
	.db	146,178,2,0,47
	.dw	_118-_122
_122:
_116:
	.db	18,50,46,40
	.dw	_117-_123
_123:
	.db	146,179,2,0,47
	.dw	_118-_124
_124:
_117:
	.db	146,180,2,0
_118:
	.db	22,19,62,36,33,72,34
	.dl	_125-_5,_136-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_126-_130
_130:
	.db	146,177,2,0,47
	.dw	_129-_131
_131:
_126:
	.db	18,49,46,40
	.dw	_127-_132
_132:
	.db	146,178,2,0,47
	.dw	_129-_133
_133:
_127:
	.db	18,50,46,40
	.dw	_128-_134
_134:
	.db	146,179,2,0,47
	.dw	_129-_135
_135:
_128:
	.db	146,180,2,0
_129:
	.db	22,19,62,36,33,62,34
	.dl	_136-_5,_147-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_137-_141
_141:
	.db	146,177,2,0,47
	.dw	_140-_142
_142:
_137:
	.db	18,49,46,40
	.dw	_138-_143
_143:
	.db	146,178,2,0,47
	.dw	_140-_144
_144:
_138:
	.db	18,50,46,40
	.dw	_139-_145
_145:
	.db	146,179,2,0,47
	.dw	_140-_146
_146:
_139:
	.db	146,180,2,0
_140:
	.db	22,19,62,36,33,60,34
	.dl	_147-_5,_158-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_148-_152
_152:
	.db	146,177,2,0,47
	.dw	_151-_153
_153:
_148:
	.db	18,49,46,40
	.dw	_149-_154
_154:
	.db	146,178,2,0,47
	.dw	_151-_155
_155:
_149:
	.db	18,50,46,40
	.dw	_150-_156
_156:
	.db	146,179,2,0,47
	.dw	_151-_157
_157:
_150:
	.db	146,180,2,0
_151:
	.db	22,19,62,36,33,58,34
	.dl	_158-_5,_169-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_159-_163
_163:
	.db	146,177,2,0,47
	.dw	_162-_164
_164:
_159:
	.db	18,49,46,40
	.dw	_160-_165
_165:
	.db	146,178,2,0,47
	.dw	_162-_166
_166:
_160:
	.db	18,50,46,40
	.dw	_161-_167
_167:
	.db	146,179,2,0,47
	.dw	_162-_168
_168:
_161:
	.db	146,180,2,0
_162:
	.db	22,19,62,36,33,56,34
	.dl	_169-_5,_180-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_170-_174
_174:
	.db	146,177,2,0,47
	.dw	_173-_175
_175:
_170:
	.db	18,49,46,40
	.dw	_171-_176
_176:
	.db	146,178,2,0,47
	.dw	_173-_177
_177:
_171:
	.db	18,50,46,40
	.dw	_172-_178
_178:
	.db	146,179,2,0,47
	.dw	_173-_179
_179:
_172:
	.db	146,180,2,0
_173:
	.db	22,19,62,36,33,54,34
	.dl	_180-_5,_191-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_181-_185
_185:
	.db	146,177,2,0,47
	.dw	_184-_186
_186:
_181:
	.db	18,49,46,40
	.dw	_182-_187
_187:
	.db	146,178,2,0,47
	.dw	_184-_188
_188:
_182:
	.db	18,50,46,40
	.dw	_183-_189
_189:
	.db	146,179,2,0,47
	.dw	_184-_190
_190:
_183:
	.db	146,180,2,0
_184:
	.db	22,19,62,36,33,52,34
	.dl	_191-_5,_202-_5
	.dw	60
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_192-_196
_196:
	.db	146,177,2,0,47
	.dw	_195-_197
_197:
_192:
	.db	18,49,46,40
	.dw	_193-_198
_198:
	.db	146,178,2,0,47
	.dw	_195-_199
_199:
_193:
	.db	18,50,46,40
	.dw	_194-_200
_200:
	.db	146,179,2,0,47
	.dw	_195-_201
_201:
_194:
	.db	146,180,2,0
_195:
	.db	22,19,62,36,33,50,34
	.dl	_202-_5,_24-_5
	.dw	58
	.db	127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_203-_207
_207:
	.db	146,177,2,0,47
	.dw	_206-_208
_208:
_203:
	.db	18,49,46,40
	.dw	_204-_209
_209:
	.db	146,178,2,0,47
	.dw	_206-_210
_210:
_204:
	.db	18,50,46,40
	.dw	_205-_211
_211:
	.db	146,179,2,0,47
	.dw	_206-_212
_212:
_205:
	.db	146,180,2,0
_206:
	.db	22,19,62,36,33
	.dl	0,0
_33:
	.dl	-1,_5,0,_373-_5
	.dw	2
	.db	145,0
	.dl	_373-_5,_136-_5
	.dw	6
	.db	86,147,2,90,147,2
	.dl	0,0
_36:
	.dl	-1,_5,_377-_5,_147-_5
	.dw	6
	.db	89,147,2,88,147,2
	.dl	0,0
_31:
	.dl	-1,_5,0,_374-_5
	.dw	6
	.db	91,147,2,92,147,2
	.dl	_378-_5,_379-_5
	.dw	6
	.db	82,147,2,81,147,2
	.dl	0,0
_27:
	.dl	-1,_5,0,_375-_5
	.dw	6
	.db	82,147,2,83,147,2
	.dl	_382-_5,_2-_5
	.dw	6
	.db	93,147,2,94,147,2
	.dl	0,0
_29:
	.dl	-1,_5,0,_374-_5
	.dw	6
	.db	84,147,2,85,147,2
	.dl	_381-_5,_2-_5
	.dw	6
	.db	91,147,2,92,147,2
	.dl	0,0
_32:
	.dl	-1,_5,0,_374-_5
	.dw	6
	.db	93,147,2,94,147,2
	.dl	_376-_5,_169-_5
	.dw	6
	.db	80,147,2,87,147,2
	.dl	0,0
_35:
	.dl	-1,_5,0,_24-_5
	.dw	2
	.db	145,4
	.dl	_380-_5,_2-_5
	.dw	4
	.db	84,157,8,8
	.dl	0,0
	; End of section

	.debug		.debug_frame
_405:
	.dl	184
	.dl	-1
	.db	3,0,2,2,173,2,15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_406-_410
_410:
	.db	146,177,2,0,47
	.dw	_409-_411
_411:
_406:
	.db	18,49,46,40
	.dw	_407-_412
_412:
	.db	146,178,2,0,47
	.dw	_409-_413
_413:
_407:
	.db	18,50,46,40
	.dw	_408-_414
_414:
	.db	146,179,2,0,47
	.dw	_409-_415
_415:
_408:
	.db	146,180,2,0
_409:
	.db	22,19,62,36,33,48,34,16,173,2,12,19,146,176,2,0,64,36,146,161,2,0,33,8,15,22,161,2,5,19,146,161,2,4,8
	.db	162,2,8,166,2,8,177,2,8,178,2,8,179,2,8,180,2,8,0,8,1,8,6,8,7,8,8,8,9,8,10,8,167,2,8,168,2,8,169,2,8,170
	.db	2,8,171,2,8,172,2,16,174,2,12,19,146,176,2,0,64,36,146,161,2,0,33,16,175,2,12,19,146,176,2,0,64,36,146
	.db	161,2,2,33,8,176,2
	; End of section

	.debug		.debug_frame, cluster 'AVL_insert'
	.dl	1204
	.dl	_405,_5,_24-_5
	.db	4
	.dl	(_37-_5)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_213-_217
_217:
	.db	146,177,2,0,47
	.dw	_216-_218
_218:
_213:
	.db	18,49,46,40
	.dw	_214-_219
_219:
	.db	146,178,2,0,47
	.dw	_216-_220
_220:
_214:
	.db	18,50,46,40
	.dw	_215-_221
_221:
	.db	146,179,2,0,47
	.dw	_216-_222
_222:
_215:
	.db	146,180,2,0
_216:
	.db	22,19,62,36,33,50,34,22,15,3,19,127,2,17,0,127,4
	.dl	(_48-_37)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_223-_227
_227:
	.db	146,177,2,0,47
	.dw	_226-_228
_228:
_223:
	.db	18,49,46,40
	.dw	_224-_229
_229:
	.db	146,178,2,0,47
	.dw	_226-_230
_230:
_224:
	.db	18,50,46,40
	.dw	_225-_231
_231:
	.db	146,179,2,0,47
	.dw	_226-_232
_232:
_225:
	.db	146,180,2,0
_226:
	.db	22,19,62,36,33,52,34,22,15,3,19,127,4,17,1,126,4
	.dl	(_59-_48)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_233-_237
_237:
	.db	146,177,2,0,47
	.dw	_236-_238
_238:
_233:
	.db	18,49,46,40
	.dw	_234-_239
_239:
	.db	146,178,2,0,47
	.dw	_236-_240
_240:
_234:
	.db	18,50,46,40
	.dw	_235-_241
_241:
	.db	146,179,2,0,47
	.dw	_236-_242
_242:
_235:
	.db	146,180,2,0
_236:
	.db	22,19,62,36,33,54,34,22,15,3,19,127,6,17,6,125,4
	.dl	(_70-_59)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_243-_247
_247:
	.db	146,177,2,0,47
	.dw	_246-_248
_248:
_243:
	.db	18,49,46,40
	.dw	_244-_249
_249:
	.db	146,178,2,0,47
	.dw	_246-_250
_250:
_244:
	.db	18,50,46,40
	.dw	_245-_251
_251:
	.db	146,179,2,0,47
	.dw	_246-_252
_252:
_245:
	.db	146,180,2,0
_246:
	.db	22,19,62,36,33,56,34,22,15,3,19,127,8,17,7,124,4
	.dl	(_81-_70)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_253-_257
_257:
	.db	146,177,2,0,47
	.dw	_256-_258
_258:
_253:
	.db	18,49,46,40
	.dw	_254-_259
_259:
	.db	146,178,2,0,47
	.dw	_256-_260
_260:
_254:
	.db	18,50,46,40
	.dw	_255-_261
_261:
	.db	146,179,2,0,47
	.dw	_256-_262
_262:
_255:
	.db	146,180,2,0
_256:
	.db	22,19,62,36,33,58,34,22,15,3,19,127,10,17,8,123,4
	.dl	(_92-_81)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_263-_267
_267:
	.db	146,177,2,0,47
	.dw	_266-_268
_268:
_263:
	.db	18,49,46,40
	.dw	_264-_269
_269:
	.db	146,178,2,0,47
	.dw	_266-_270
_270:
_264:
	.db	18,50,46,40
	.dw	_265-_271
_271:
	.db	146,179,2,0,47
	.dw	_266-_272
_272:
_265:
	.db	146,180,2,0
_266:
	.db	22,19,62,36,33,60,34,22,15,3,19,127,12,17,9,122,4
	.dl	(_103-_92)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_273-_277
_277:
	.db	146,177,2,0,47
	.dw	_276-_278
_278:
_273:
	.db	18,49,46,40
	.dw	_274-_279
_279:
	.db	146,178,2,0,47
	.dw	_276-_280
_280:
_274:
	.db	18,50,46,40
	.dw	_275-_281
_281:
	.db	146,179,2,0,47
	.dw	_276-_282
_282:
_275:
	.db	146,180,2,0
_276:
	.db	22,19,62,36,33,62,34,22,15,3,19,127,14,17,10,121,4
	.dl	(_114-_103)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_283-_287
_287:
	.db	146,177,2,0,47
	.dw	_286-_288
_288:
_283:
	.db	18,49,46,40
	.dw	_284-_289
_289:
	.db	146,178,2,0,47
	.dw	_286-_290
_290:
_284:
	.db	18,50,46,40
	.dw	_285-_291
_291:
	.db	146,179,2,0,47
	.dw	_286-_292
_292:
_285:
	.db	146,180,2,0
_286:
	.db	22,19,62,36,33,72,34,22,15,3,19,127,24,4
	.dl	(_125-_114)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_293-_297
_297:
	.db	146,177,2,0,47
	.dw	_296-_298
_298:
_293:
	.db	18,49,46,40
	.dw	_294-_299
_299:
	.db	146,178,2,0,47
	.dw	_296-_300
_300:
_294:
	.db	18,50,46,40
	.dw	_295-_301
_301:
	.db	146,179,2,0,47
	.dw	_296-_302
_302:
_295:
	.db	146,180,2,0
_296:
	.db	22,19,62,36,33,62,34,22,15,3,19,127,14,4
	.dl	(_136-_125)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_303-_307
_307:
	.db	146,177,2,0,47
	.dw	_306-_308
_308:
_303:
	.db	18,49,46,40
	.dw	_304-_309
_309:
	.db	146,178,2,0,47
	.dw	_306-_310
_310:
_304:
	.db	18,50,46,40
	.dw	_305-_311
_311:
	.db	146,179,2,0,47
	.dw	_306-_312
_312:
_305:
	.db	146,180,2,0
_306:
	.db	22,19,62,36,33,60,34,22,15,3,19,127,12,202,4
	.dl	(_147-_136)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_313-_317
_317:
	.db	146,177,2,0,47
	.dw	_316-_318
_318:
_313:
	.db	18,49,46,40
	.dw	_314-_319
_319:
	.db	146,178,2,0,47
	.dw	_316-_320
_320:
_314:
	.db	18,50,46,40
	.dw	_315-_321
_321:
	.db	146,179,2,0,47
	.dw	_316-_322
_322:
_315:
	.db	146,180,2,0
_316:
	.db	22,19,62,36,33,58,34,22,15,3,19,127,10,201,4
	.dl	(_158-_147)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_323-_327
_327:
	.db	146,177,2,0,47
	.dw	_326-_328
_328:
_323:
	.db	18,49,46,40
	.dw	_324-_329
_329:
	.db	146,178,2,0,47
	.dw	_326-_330
_330:
_324:
	.db	18,50,46,40
	.dw	_325-_331
_331:
	.db	146,179,2,0,47
	.dw	_326-_332
_332:
_325:
	.db	146,180,2,0
_326:
	.db	22,19,62,36,33,56,34,22,15,3,19,127,8,200,4
	.dl	(_169-_158)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_333-_337
_337:
	.db	146,177,2,0,47
	.dw	_336-_338
_338:
_333:
	.db	18,49,46,40
	.dw	_334-_339
_339:
	.db	146,178,2,0,47
	.dw	_336-_340
_340:
_334:
	.db	18,50,46,40
	.dw	_335-_341
_341:
	.db	146,179,2,0,47
	.dw	_336-_342
_342:
_335:
	.db	146,180,2,0
_336:
	.db	22,19,62,36,33,54,34,22,15,3,19,127,6,199,4
	.dl	(_180-_169)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_343-_347
_347:
	.db	146,177,2,0,47
	.dw	_346-_348
_348:
_343:
	.db	18,49,46,40
	.dw	_344-_349
_349:
	.db	146,178,2,0,47
	.dw	_346-_350
_350:
_344:
	.db	18,50,46,40
	.dw	_345-_351
_351:
	.db	146,179,2,0,47
	.dw	_346-_352
_352:
_345:
	.db	146,180,2,0
_346:
	.db	22,19,62,36,33,52,34,22,15,3,19,127,4,198,4
	.dl	(_191-_180)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_353-_357
_357:
	.db	146,177,2,0,47
	.dw	_356-_358
_358:
_353:
	.db	18,49,46,40
	.dw	_354-_359
_359:
	.db	146,178,2,0,47
	.dw	_356-_360
_360:
_354:
	.db	18,50,46,40
	.dw	_355-_361
_361:
	.db	146,179,2,0,47
	.dw	_356-_362
_362:
_355:
	.db	146,180,2,0
_356:
	.db	22,19,62,36,33,50,34,22,15,3,19,127,2,193,4
	.dl	(_202-_191)/2
	.db	15,60,127,0,18,10
	.dw	16383
	.db	26,22,62,37,18,48,46,40
	.dw	_363-_367
_367:
	.db	146,177,2,0,47
	.dw	_366-_368
_368:
_363:
	.db	18,49,46,40
	.dw	_364-_369
_369:
	.db	146,178,2,0,47
	.dw	_366-_370
_370:
_364:
	.db	18,50,46,40
	.dw	_365-_371
_371:
	.db	146,179,2,0,47
	.dw	_366-_372
_372:
_365:
	.db	146,180,2,0
_366:
	.db	22,19,62,36,33,48,34,8,15,192
	; End of section


; avlTree.c	   339  
; avlTree.c	   340  ///////////////////////////*
; avlTree.c	   341  //////////////////////////find a specific node's key in the tree
; avlTree.c	   342  //////////////////////////*/
; avlTree.c	   343  //////////////////////////AVLNode* AVL_find(AVLNode* t, ubyte4 messageID)
; avlTree.c	   344  //////////////////////////{
; avlTree.c	   345  //////////////////////////    if (t == NULL)
; avlTree.c	   346  //////////////////////////    {
; avlTree.c	   347  //////////////////////////        return NULL;
; avlTree.c	   348  //////////////////////////    }
; avlTree.c	   349  //////////////////////////    if (messageID < t->id)
; avlTree.c	   350  //////////////////////////    {
; avlTree.c	   351  //////////////////////////        return AVL_find(t->left, messageID);
; avlTree.c	   352  //////////////////////////    }
; avlTree.c	   353  //////////////////////////    else if (messageID > t->id)
; avlTree.c	   354  //////////////////////////    {
; avlTree.c	   355  //////////////////////////        return AVL_find(t->right, messageID);
; avlTree.c	   356  //////////////////////////    }
; avlTree.c	   357  //////////////////////////    else
; avlTree.c	   358  //////////////////////////    {
; avlTree.c	   359  //////////////////////////        return t;
; avlTree.c	   360  //////////////////////////    }
; avlTree.c	   361  //////////////////////////}
; avlTree.c	   362  
; avlTree.c	   363  ///*
; avlTree.c	   364  //data data of a node
; avlTree.c	   365  //*/
; avlTree.c	   366  //int AVL_getData(AVLNode* n)
; avlTree.c	   367  //{
; avlTree.c	   368  //	return n->id;
; avlTree.c	   369  //}
; avlTree.c	   370  //
; avlTree.c	   371  ///*
; avlTree.c	   372  //find minimum node's key
; avlTree.c	   373  //*/
; avlTree.c	   374  //AVLNode* AVL_findMin(AVLNode* t)
; avlTree.c	   375  //{
; avlTree.c	   376  //    if (t == NULL)
; avlTree.c	   377  //        return NULL;
; avlTree.c	   378  //    else if (t->left == NULL)
; avlTree.c	   379  //        return t;
; avlTree.c	   380  //    else
; avlTree.c	   381  //        return AVL_findMin(t->left);
; avlTree.c	   382  //}
; avlTree.c	   383  //
; avlTree.c	   384  ///*
; avlTree.c	   385  //find maximum node's key
; avlTree.c	   386  //*/
; avlTree.c	   387  //AVLNode* AVL_findMax(AVLNode* t)
; avlTree.c	   388  //{
; avlTree.c	   389  //    if (t != NULL)
; avlTree.c	   390  //        while (t->right != NULL)
; avlTree.c	   391  //            t = t->right;
; avlTree.c	   392  //
; avlTree.c	   393  //    return t;
; avlTree.c	   394  //}
; avlTree.c	   395  
; avlTree.c	   396  

	; Module end
	.end
